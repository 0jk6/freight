# create a namespace
apiVersion: v1
kind: Namespace
metadata:
  name: freight-ns

---
# create a service account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: freight-sa
  namespace: freight-ns

---
# create rbac
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: freight-role
  namespace: freight-ns
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["list", "get", "create", "delete"]
  - apiGroups: ["batch"]
    resources: ["jobs"]
    verbs: ["list", "get", "create", "delete"]
  - apiGroups: [""]
    resources: ["pods/log"]
    verbs: ["list", "get"]

---
# create rolebinding to bind the service account to the role
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: freight-rolebinding
  namespace: freight-ns
subjects:
  - kind: ServiceAccount
    name: freight-sa
    namespace: freight-ns
roleRef:
  kind: Role
  name: freight-role
  apiGroup: rbac.authorization.k8s.io

---
# create rabbitmq deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
  namespace: freight-ns
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      containers:
        - name: rabbitmq
          image: rabbitmq:3-management
          ports:
            - containerPort: 5672

---
# create a rabbitmq service
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
  namespace: freight-ns
spec:
  selector:
    app: rabbitmq
  ports:
    - protocol: TCP
      port: 5672
      targetPort: 5672

---
# create postgres deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: freight-ns
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:12.5-alpine
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              value: "password"
            - name: POSTGRES_DB
              value: "freight"

---
# create a postgres service
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: freight-ns
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432

---
# create a freight-backend deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: freight-backend
  namespace: freight-ns
spec:
  replicas: 1
  selector:
    matchLabels:
      app: freight-backend
  template:
    metadata:
      labels:
        app: freight-backend
    spec:
      serviceAccountName: freight-sa
      containers:
        - name: freight-backend
          image: 0jk6/freight-backend:0.0.1
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
          env:
            - name: POSTGRES_HOST
              value: "postgres"
            - name: RABBITMQ_HOST
              value: "rabbitmq"

---
# create a freight-backend service
apiVersion: v1
kind: Service
metadata:
  name: freight-backend
  namespace: freight-ns
spec:
  type: NodePort
  selector:
    app: freight-backend
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
      nodePort: 30000

---
#create freight-service deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: freight-service
  namespace: freight-ns
spec:
  replicas: 1
  selector:
    matchLabels:
      app: freight-service
  template:
    metadata:
      labels:
        app: freight-service
    spec:
      serviceAccountName: freight-sa
      containers:
        - name: freight-service
          image: 0jk6/freight-service:0.0.1
          imagePullPolicy: IfNotPresent
          env:
            - name: POSTGRES_HOST
              value: "postgres"
            - name: RABBITMQ_HOST
              value: "rabbitmq"
